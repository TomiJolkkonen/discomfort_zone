import os
import nmap
import paramiko
import requests
from bs4 import BeautifulSoup
from datetime import datetime

# Configuration
TARGET_IP = "192.168.1.1"  # Change to your target
TARGET_WEBSITE = "http://example.com"  # Change to target website
USERNAME = "admin"
PASSWORD_LIST = ["123456", "password", "admin", "letmein"]

# Store findings
findings = []


### 1Ô∏è‚É£ Port Scanning ###
def scan_ports():
    scanner = nmap.PortScanner()
    print("[*] Scanning open ports...")
    scanner.scan(TARGET_IP, '1-65535')
    
    for host in scanner.all_hosts():
        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            for port in ports:
                findings.append(f"- Open Port: {port} ({scanner[host][proto][port]['state']})")

    print("[+] Port scanning completed!")


### 2Ô∏è‚É£ Service Enumeration ###
def enumerate_services():
    scanner = nmap.PortScanner()
    print("[*] Enumerating services...")
    scanner.scan(TARGET_IP, arguments='-sV')
    
    for host in scanner.all_hosts():
        for proto in scanner[host].all_protocols():
            for port in scanner[host][proto].keys():
                service = scanner[host][proto][port]
                findings.append(f"- Service on {port}: {service['name']} ({service['version']})")
    
    print("[+] Service enumeration completed!")


### 3Ô∏è‚É£ Basic Vulnerability Scanning ###
def scan_vulnerabilities():
    scanner = nmap.PortScanner()
    print("[*] Running vulnerability scan...")
    scanner.scan(TARGET_IP, arguments='--script vuln')

    for host in scanner.all_hosts():
        for port in scanner[host]['tcp'].keys():
            if 'script' in scanner[host]['tcp'][port]:
                for script, output in scanner[host]['tcp'][port]['script'].items():
                    findings.append(f"- Vulnerability on Port {port}: {script}\n  ```\n  {output}\n  ```")

    print("[+] Vulnerability scanning completed!")


### 4Ô∏è‚É£ Web Application Scanning ###
def scan_web():
    print("[*] Scanning web application...")
    try:
        response = requests.get(TARGET_WEBSITE)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            links = [a['href'] for a in soup.find_all('a', href=True)]
            
            sensitive_files = ["/admin", "/config.php", "/backup", "/.git"]
            found_files = [link for link in links if any(s in link for s in sensitive_files)]
            
            for file in found_files:
                findings.append(f"- Exposed file: {file}")

    except requests.exceptions.RequestException:
        findings.append("- Could not access the website.")
    
    print("[+] Web scan completed!")


### 5Ô∏è‚É£ SSH Brute Force Testing ###
def ssh_brute_force():
    print("[*] Attempting SSH brute force...")
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    for password in PASSWORD_LIST:
        try:
            ssh.connect(TARGET_IP, username=USERNAME, password=password, timeout=3)
            findings.append(f"- Weak SSH credentials found: {USERNAME}/{password}")
            ssh.close()
            break
        except paramiko.AuthenticationException:
            continue
        except Exception as e:
            findings.append(f"- SSH Error: {str(e)}")
            break

    print("[+] SSH brute force completed!")


### üìÑ Generate Markdown Report ###
def generate_report():
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    report_name = f"pentest_report_{timestamp}.md"

    with open(report_name, "w") as report:
        report.write("# Penetration Test Report\n")
        report.write(f"**Target:** {TARGET_IP}\n\n")
        report.write("## Findings\n")
        
        if findings:
            for item in findings:
                report.write(f"- {item}\n")
        else:
            report.write("- No issues found.\n")

        report.write("\n## Recommended Fixes\n")
        report.write("- Close unnecessary ports.\n")
        report.write("- Update vulnerable services.\n")
        report.write("- Restrict SSH access and use strong passwords.\n")
        report.write("- Protect sensitive files on the web server.\n")

    print(f"[+] Report generated: {report_name}")


### **Run all tests**
def main():
    scan_ports()
    enumerate_services()
    scan_vulnerabilities()
    scan_web()
    ssh_brute_force()
    generate_report()


if __name__ == "__main__":
    main()
